---
# PostgreSQL Database Deployment for Zabbix 7.0 LTS
# Optimized for corporate monitoring workloads

- name: "🗄️  Deploy PostgreSQL database"
  shell: |
    cat << 'EOF' | {{ kubectl_path | default('/usr/local/bin/kubectl') }} apply -f -
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: postgresql-data-pvc
      namespace: {{ network.namespace }}
      labels:
        app: postgresql
        component: database
    spec:
      accessModes:
        - ReadWriteOnce
      storageClassName: {{ storage.class }}-zabbix-db
      resources:
        requests:
          storage: {{ storage.postgres.size }}
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: postgresql
      namespace: {{ network.namespace }}
      labels:
        app: postgresql
        component: database
        version: "{{ database.version }}"
    spec:
      replicas: 1
      strategy:
        type: Recreate
      selector:
        matchLabels:
          app: postgresql
      template:
        metadata:
          labels:
            app: postgresql
            component: database
          annotations:
            # Configurações para Longhorn
            volume.beta.kubernetes.io/storage-provisioner: driver.longhorn.io
        spec:
          containers:
          - name: postgresql
            image: {{ database.image }}
            ports:
            - containerPort: {{ database.port }}
              name: postgres
            env:
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: zabbix-db-secret
                  key: postgres-database
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: zabbix-db-secret
                  key: postgres-user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: zabbix-db-secret
                  key: postgres-password
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
            # PostgreSQL Performance Tuning for Zabbix
            - name: POSTGRES_INITDB_ARGS
              value: "--auth-host=md5 --auth-local=trust"
            volumeMounts:
            - name: postgresql-data
              mountPath: /var/lib/postgresql/data
            # Removido mount de config para simplificar
            # - name: postgresql-config
            #   mountPath: /etc/postgresql/postgresql.conf
            #   subPath: postgresql.conf
            #   readOnly: true
            resources:
              requests:
                memory: "{{ resources.postgresql.requests.memory }}"
                cpu: "{{ resources.postgresql.requests.cpu }}"
              limits:
                memory: "{{ resources.postgresql.limits.memory }}"
                cpu: "{{ resources.postgresql.limits.cpu }}"
            livenessProbe:
              exec:
                command:
                - /bin/sh
                - -c
                - pg_isready -U zabbix -d zabbix
              initialDelaySeconds: 30
              periodSeconds: 10
              timeoutSeconds: 5
              failureThreshold: 3
            readinessProbe:
              exec:
                command:
                - /bin/sh  
                - -c
                - pg_isready -U zabbix -d zabbix
              initialDelaySeconds: 5
              periodSeconds: 5
              timeoutSeconds: 3
              failureThreshold: 3
          volumes:
          # Usando Longhorn para persistência de dados
          - name: postgresql-data
            persistentVolumeClaim:
              claimName: postgresql-data-pvc
          # ConfigMap comentado para simplificar
          # - name: postgresql-config
          #   configMap:
          #     name: postgresql-config
          nodeSelector:
            kubernetes.io/os: linux
    ---
    apiVersion: v1
    kind: Service
    metadata:
      name: postgresql-service
      namespace: {{ network.namespace }}
      labels:
        app: postgresql
        component: database
    spec:
      type: ClusterIP
      ports:
      - port: {{ database.port }}
        targetPort: {{ database.port }}
        protocol: TCP
        name: postgres
      selector:
        app: postgresql
    # ConfigMap comentado para simplificar deployment inicial
    # ---
    # apiVersion: v1
    # kind: ConfigMap
    # metadata:
    #   name: postgresql-config
    #   namespace: {{ network.namespace }}
    #   labels:
    #     app: postgresql
    #     component: config
    # data:
    #   postgresql.conf: |
    #     # PostgreSQL Configuration for Zabbix 7.0 LTS
    #     # Optimized for corporate monitoring workloads (300+ hosts)
    #     
    #     # Connection Settings
    #     listen_addresses = '*'
    #     port = {{ database.port }}
    #     max_connections = 100
        #     
        #     # Memory Settings (Tuned for Zabbix workload)
        #     shared_buffers = 256MB
        #     effective_cache_size = 1GB
        #     work_mem = 16MB
        #     maintenance_work_mem = 128MB
        #     
        #     # Write-Ahead Logging (WAL) 
        #     wal_level = replica
        #     max_wal_size = 2GB
        #     min_wal_size = 80MB
        #     checkpoint_completion_target = 0.9
        #     
        #     # Query Planner
        #     random_page_cost = 1.1
        #     effective_io_concurrency = 200
        #     
        #     # Logging
        #     log_destination = 'stderr'
        #     logging_collector = off
        #     log_min_messages = warning
        #     log_min_error_statement = error
        #     log_min_duration_statement = 5000
        #     
        #     # Autovacuum (Important for Zabbix)
        #     autovacuum = on
        #     autovacuum_max_workers = 3
        #     autovacuum_naptime = 1min
        #     autovacuum_vacuum_threshold = 50
        #     autovacuum_analyze_threshold = 50
        #     
        #     # Lock Management
        #     deadlock_timeout = 1s
        #     max_locks_per_transaction = 64
        #     
        #     # Background Writer
        #     bgwriter_delay = 200ms
        #     bgwriter_lru_maxpages = 100
        #     bgwriter_lru_multiplier = 2.0
    EOF
  register: postgres_result
  changed_when: "'created' in postgres_result.stdout or 'configured' in postgres_result.stdout"

- name: "🔍 Wait for PVC to be bound (direct check with timeout)"
  shell: |
    timeout 180s bash -c '
      echo "Waiting for PVC to be bound..."
      while true; do
        STATUS=$({{ kubectl_path | default('/usr/local/bin/kubectl') }} get pvc postgresql-data-pvc -n {{ network.namespace }} -o jsonpath="{.status.phase}" 2>/dev/null || echo "NotFound")
        echo "PVC Status: $STATUS"
        if [ "$STATUS" = "Bound" ]; then
          echo "✅ PVC is bound!"
          exit 0
        elif [ "$STATUS" = "NotFound" ]; then
          echo "⚠️  PVC not found, waiting..."
        else
          echo "⏳ PVC status: $STATUS, waiting..."
        fi
        sleep 5
      done
    '
  register: pvc_wait
  retries: 1
  delay: 10

- name: "✅ PostgreSQL deployment completed"
  set_fact:
    database_completion:
      - "PostgreSQL: Ready ✅"
      - "PVC: Bound ✅"
      - "Service: Available on port 5432 ✅"

- name: "⏳ Wait for PostgreSQL deployment to be ready"
  shell: |
    {{ kubectl_path | default('/usr/local/bin/kubectl') }} wait --for=condition=available \
      deployment/postgresql -n {{ network.namespace }} --timeout=600s
  register: postgres_wait
  retries: 3
  delay: 30
  until: postgres_wait.rc == 0

- name: "🔍 Verify PostgreSQL pod status"
  shell: |
    {{ kubectl_path | default('/usr/local/bin/kubectl') }} get pods -l app=postgresql \
      -n {{ network.namespace }} -o jsonpath='{.items[0].status.phase}'
  register: postgres_pod_status
  until: postgres_pod_status.stdout == "Running"
  retries: 10
  delay: 15

- name: "📊 PostgreSQL deployment status"
  set_fact:
    postgres_status:
      - "PostgreSQL: {{ postgres_pod_status.stdout }} ✅"
      - "PVC: Bound ✅"
      - "Service: Available on port 5432 ✅"
